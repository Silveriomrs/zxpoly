/*
 * Copyright (C) 2019 Igor Maznitsa
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.igormaznitsa.zxpspritecorrector.components;

import com.igormaznitsa.zxpspritecorrector.files.Info;
import com.igormaznitsa.zxpspritecorrector.files.plugins.AbstractFilePlugin;

import javax.swing.*;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import java.util.List;

import static java.util.Objects.requireNonNull;
import static javax.swing.GroupLayout.Alignment.*;
import static javax.swing.GroupLayout.DEFAULT_SIZE;
import static javax.swing.GroupLayout.PREFERRED_SIZE;

public class SelectInsideDataDialog extends javax.swing.JDialog implements TableModel {

  private static final long serialVersionUID = -1593974231619108719L;
  private final List<Info> infoList;
  private int result = -1;
  private JButton buttonCancel;
  private JButton buttonOk;
  private JTable itemTable;

  public SelectInsideDataDialog(final java.awt.Frame parent, final File file,
                                final AbstractFilePlugin plugin) throws IOException {
    super(parent, true);
    initComponents();
    this.setLocationRelativeTo(parent);
    this.setTitle(file.getName());

    this.infoList = plugin.getImportingContainerFileList(file);
    if (infoList == null) {
      throw new IOException("Can't get list of container items");
    }

    final DefaultListModel<Info> model = new DefaultListModel<>();

    for (final Info s : infoList) {
      model.addElement(s);
    }

    this.buttonOk.setEnabled(false);

    this.itemTable.setModel(this);

    this.itemTable.getSelectionModel().addListSelectionListener(this::onItemSelection);
  }

  private void onItemSelection(final ListSelectionEvent event) {
    final int selectedIndex = this.itemTable.getSelectedRow();
    if (selectedIndex < 0) {
      buttonOk.setEnabled(false);
    } else {
      final Info info = this.infoList.get(selectedIndex);
      buttonOk.setEnabled(info.isSelectable());
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  private void initComponents() {

    buttonCancel = new JButton();
    buttonOk = new JButton();
    JScrollPane jScrollPane2 = new JScrollPane();
    itemTable = new JTable();

    setDefaultCloseOperation(DISPOSE_ON_CLOSE);

    buttonCancel.setIcon(new ImageIcon(
            requireNonNull(getClass().getResource("/com/igormaznitsa/zxpspritecorrector/icons/cross.png")))); // NOI18N
    buttonCancel.setText("Cancel");
    buttonCancel.addActionListener(this::buttonCancelActionPerformed);

    buttonOk.setIcon(new ImageIcon(
            requireNonNull(getClass().getResource("/com/igormaznitsa/zxpspritecorrector/icons/tick.png")))); // NOI18N
    buttonOk.setText("Ok");
    buttonOk.addActionListener(this::buttonOkActionPerformed);

    itemTable.setModel(new DefaultTableModel(
            new Object[][]{

            },
            new String[]{

            }
    ));
    itemTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    jScrollPane2.setViewportView(itemTable);

    GroupLayout layout = new GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
            layout.createParallelGroup(LEADING)
                    .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                            .addGap(0, 127, Short.MAX_VALUE)
                                            .addComponent(buttonOk)
                                            .addPreferredGap(ComponentPlacement.RELATED)
                                            .addComponent(buttonCancel))
                                    .addComponent(jScrollPane2, TRAILING,
                                            PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
    );

    layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, buttonCancel, buttonOk);

    layout.setVerticalGroup(
            layout.createParallelGroup(LEADING)
                    .addGroup(TRAILING, layout.createSequentialGroup()
                            .addGap(13, 13, 13)
                            .addComponent(jScrollPane2, DEFAULT_SIZE, 240,
                                    Short.MAX_VALUE)
                            .addGap(9, 9, 9)
                            .addGroup(layout.createParallelGroup(BASELINE)
                                    .addComponent(buttonCancel)
                                    .addComponent(buttonOk))
                            .addContainerGap())
    );

    pack();
  }

  private void buttonOkActionPerformed(
          ActionEvent evt) {
    this.result = this.itemTable.getSelectedRow();
    setVisible(false);
  }

  private void buttonCancelActionPerformed(
          ActionEvent evt) {
    this.result = -1;
    setVisible(false);
  }

  public int getSelectedIndex() {
    return this.result;
  }

  @Override
  public int getRowCount() {
    return this.infoList.size();
  }

  @Override
  public int getColumnCount() {
    return 3;
  }

  @Override
  public String getColumnName(int columnIndex) {
    switch (columnIndex) {
      case 0:
        return "Name";
      case 1:
        return "Type";
      case 2:
        return "Size";
      default:
        return null;
    }
  }

  @Override
  public Class<?> getColumnClass(int columnIndex) {
    return String.class;
  }

  @Override
  public boolean isCellEditable(int rowIndex, int columnIndex) {
    return false;
  }

  @Override
  public Object getValueAt(int rowIndex, int columnIndex) {
    final Info row = this.infoList.get(rowIndex);
    switch (columnIndex) {
      case 0:
        return row.getName();
      case 1:
        return Character.toString(row.getType());
      case 2:
        return Integer.toString(row.getLength());
      default:
        return null;
    }
  }

  @Override
  public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
  }

  @Override
  public void addTableModelListener(TableModelListener l) {
  }

  @Override
  public void removeTableModelListener(TableModelListener l) {
  }
}
